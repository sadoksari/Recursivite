
/********* premiere version  RECURSIVE **************/

FUNCTION palandrome( mot : STRING ) : BOOLEAN

VAR

  long : INTEGER := mot.length  ;  
        
BEGIN

    // si le mot est constitué d'une seule lettre alors est une palindrome
    IF ( long == 1 )  THEN
       return ( true);
    END_IF 	   
	   
	// si la premiere et la derniere sont differentes
	IF ( mot[0] != mot[long - 1 ] )  THEN
        return ( false)
    END_IF 	   
	   
	 // si le mot est constitué de deux lettres identiques
	IF ( long == 2  )  THEN
	   return ( true);
	END_IF  
	 
	//   si la longeur du mot est > 2, on fait appel recursif avec le sous mot(mot initial sans le 1ere 
	//   et le derniere caractere)
    IF ( long > 2 )
      return ( palandrome ( substring ( mot , 1, long -2 )  ) 
    END_IF 
 
END

/*********** deuxieme version iterative ************/

FUNCTION palandrome( mot : STRING ) : BOOLEAN

VAR

  i : INTEGER := 0;
  long : INTEGER := mot.length-1 ;  

        
BEGIN

    // on compare chaque caractere du mot avec son image chiral 
    FOR i FROM 0 TO long/2 DO

        IF ( mot[i] <> mot [long - i ] ) THEN
             return ( false ) ;
        END_IF

   END_FOR
   return ( true) ;      
 
END 

